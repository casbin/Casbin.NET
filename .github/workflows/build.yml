name: Build

on: [push, pull_request, workflow_dispatch]

env:
  SHA: ${{ GITHUB.SHA }}
  REF: ${{ GITHUB.REF }}
  RUN_ID: ${{ GITHUB.RUN_ID }}
  RUN_NUMBER: ${{ GITHUB.RUN_NUMBER }}
  BUILD_RUN_NUMBER: build.${{ GITHUB.RUN_NUMBER }}
  GITHUB_TOKEN: ${{ SECRETS.GITHUB_TOKEN }}
  MYGET_API_TOKEN: ${{ SECRETS.MYGET_API_TOKEN }}
  COVERALLS_REPO_TOKEN: ${{ SECRETS.COVERALLS_REPO_TOKEN }}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET Core 3.1.x SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Setup .NET 5.0.x SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Setup .NET 6.0.x SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Check .NET info
        run: dotnet --info

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
            New-Item -Path .\.sonar\scanner -ItemType Directory
            dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  
      #- name: fix code coverage paths
      #  working-directory: ./coverage
      #  run: |
      #    sed -i 's@'${{ GITHUB.WORKSPACE }}'@/github/workspace/@g' lcov.info
      #    sed -i 's@'${{ GITHUB.WORKSPACE }}'@/github/workspace/@g' sonar-cloud-reporter.xml

      - name: Install dependencies
        run: dotnet restore

      - name: Test For Sonarcloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Leonardo-Ferreira_Casbin.NET" /o:"leonardo-ferreira" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="${{ GITHUB.WORKSPACE }}\**\coverage*.opencover.xml" /d:sonar.cs.vstest.reportsPaths="${{ GITHUB.WORKSPACE }}\**\*.trx" /d:sonar.verbose=true
          dotnet build -c Release --no-restore
          dotnet test -c Release --logger trx -r test-results --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover -f net5 -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=json,cobertura,lcov,teamcity,opencover
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  
      - name: Upload coverage
        if: github.repository_owner == 'casbin' && github.event_name == 'push'
        run: |
          dotnet tool install coveralls.net --version 2.0.0-beta0002 --tool-path tools;
          $CommitAuthor = git show -s --pretty=format:"%cn";
          echo "Coomit author is: $CommitAuthor";
          $CommitAuthorEmail = git show -s --pretty=format:"%ce";
          echo "Coomit author email is: $CommitAuthorEmail";
          $CommitMessage = git show -s --pretty=format:"%s";
          echo "Coomit message is: $CommitMessage";
          cp test-results/**/*.opencover.xml test-results
          tools/csmacnz.Coveralls --opencover -i test-results/coverage.opencover.xml --repoToken $env:COVERALLS_REPO_TOKEN `
          --commitId $env:SHA --commitBranch $env:REF --commitAuthor "$CommitAuthor" `
          --commitEmail "$CommitAuthorEmail" --commitMessage "$CommitMessage" `
          --jobId $env:RUN_NUMBER --serviceName github-actions  --useRelativePaths;
  
          if($LastExitCode -ne 0)
          {
              Write-Warning -Message "Can not upload coverage, laat exit code is ${LastExitCode}."
              $LastExitCode = 0;
          }
  
      - name: Upload test results artefacts
        if: github.repository_owner == 'casbin' && github.event_name == 'push'
        uses: actions/upload-artifact@v1.0.0
        with:
          name: "drop-ci-test-results"
          path: './test-results'

  benchmark:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup .NET 3.1.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Setup .NET 5.0.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Setup .NET 6.0.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.100-preview.5.21302.13

    - name: Check .NET info
      run: dotnet --info

    - name: Install dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build -c Release --no-restore

    - name: Test solution
      run: dotnet test -c Release --no-restore --no-build --verbosity normal

    - name: Run Benchmark
      run: |
        cd Casbin.Benchmark
        dotnet run -c Release --filter ** -f net5

    - name: Upload benchmark results to artefacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: "drop-ci-benchmark-resuls"
        path: './Casbin.Benchmark/BenchmarkDotNet.Artifacts'

  dry-run-semantic-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.repository_owner == 'casbin' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Dry run semantic-release
        run: |
          export PATH=$PATH:$(yarn global bin)
          yarn global add semantic-release@17.4.3
          semantic-release --dry-run

  release-build-version:
    runs-on: windows-latest
    needs: build
    if: github.repository_owner == 'casbin' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Git fetch tags
      run: git fetch --tags

    - name: Check tags
      run: git tag -l -n

    - name: Setup .NET Core 3.1.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Setup .NET 5.0.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Setup .NET 6.0.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.100-preview.5.21302.13

    - name: Check .NET info
      run: dotnet --info

    - name: Install dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build -c Release --no-restore

    - name: Pack packages
      run: |
        $LastTag = git describe --tags (git rev-list --tags --max-count=1);
        echo "Last tag is: $LastTag";
        $Version = ($LastTag).TrimStart('v');
        echo "Publishing version: $Version";
        $NowBranchName = git rev-parse --abbrev-ref HEAD;
        echo "Now branch name: $NowBranchName";
        $PackageVersion = ($LastTag).TrimStart('v') + "-" + $env:BUILD_RUN_NUMBER + "." + $NowBranchName + "." + $env:SHA.SubString(0, 7);
        echo "Publishing package version: ${PackageVersion}";
        dotnet pack -c Release -o packages /p:PackageVersion=$PackageVersion /p:Version=$Version;

    - name: Upload packages artefacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: "drop-ci-build-packages"
        path: './packages'

    - name: Add myget nuget source
      run: dotnet nuget add source https://www.myget.org/F/casbin-net/api/v2/package --name myget.org

    - name: Push develop packages to myget.org
      run: dotnet nuget push .\packages\*.nupkg -s myget.org -k $env:MYGET_API_TOKEN --skip-duplicate
