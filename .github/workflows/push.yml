name: Push

on:
  push:
    tags:
      - v2.*
      - v1.*
  workflow_dispatch:

env:
  SHA: ${{ GITHUB.SHA }}
  REF: ${{ GITHUB.REF }}
  RUN_ID: ${{ GITHUB.RUN_ID }}
  RUN_NUMBER: ${{ GITHUB.RUN_NUMBER }}
  BUILD_RUN_NUMBER: build.${{ GITHUB.RUN_NUMBER }}
  GITHUB_TOKEN: ${{ SECRETS.GITHUB_TOKEN }}
  MYGET_API_TOKEN: ${{ SECRETS.MYGET_API_TOKEN }}
  NUGET_API_TOKEN: ${{ SECRETS.NUGET_API_KEY }}
  COVERALLS_REPO_TOKEN: ${{ SECRETS.COVERALLS_REPO_TOKEN }}

jobs:
  push-packages:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git fetch tags
        run: git fetch --tags

      - name: Check tags
        run: git tag -l -n

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x
          include-prerelease: true

      - name: Check .NET info
        run: dotnet --info

      - name: Install dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build -c Release --no-restore

      - name: Pack packages
        run: |
          $LastTag = git describe --tags (git rev-list --tags --max-count=1);
          echo "Last tag is: $LastTag";
          $Version = ($LastTag).TrimStart('v');
          echo "Publishing version: $Version";
          dotnet pack -c Release -o packages /p:PackageVersion=$Version /p:Version=$Version;

          if($LastExitCode -ne 0)
          {
              Write-Warning -Message "Pack packages warming, last exit code is ${LastExitCode}."
              $LastExitCode = 0;
          }

      - name: Upload packages artefacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: "drop-ci-packages"
          path: './packages'

      - name: Add myget nuget source
        run: dotnet nuget add source https://www.myget.org/F/casbin-net/api/v2/package --name myget.org

      - name: Push packages to myget.org
        run: dotnet nuget push .\packages\*.nupkg -s myget.org -k $env:MYGET_API_TOKEN --skip-duplicate

      - name: Add github nuget source
        run: dotnet nuget add source https://nuget.pkg.github.com/casbin/index.json --name github.com --username casbin --password $env:GITHUB_TOKEN

      - name: Push packages to github.com
        run: dotnet nuget push .\packages\*.nupkg -s github.com --skip-duplicate;

      - name: Push packages to nuget.org
        run: dotnet nuget push .\packages\*.nupkg -s nuget.org -k $env:NUGET_API_TOKEN --skip-duplicate
